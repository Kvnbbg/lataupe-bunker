"""
Syst√®me de v√©rification et pr√©vention des doublons pour CFA
√âvite les fichiers, fonctions et ressources en double
"""

import os
import hashlib
import ast
import json
from typing import Dict, List, Set, Tuple, Optional
from pathlib import Path
from collections import defaultdict
import difflib

class DuplicateChecker:
    """V√©rificateur de doublons intelligent"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.file_hashes = {}
        self.function_signatures = defaultdict(list)
        self.class_signatures = defaultdict(list)
        self.duplicates_found = []
        
        # Extensions √† v√©rifier
        self.code_extensions = {'.py', '.js', '.css', '.html', '.json', '.md'}
        self.ignore_patterns = {
            '__pycache__',
            '.git',
            'node_modules',
            '.venv',
            'venv',
            '.pytest_cache',
            '.coverage'
        }
    
    def scan_project(self) -> Dict[str, List]:
        """Scanne tout le projet pour d√©tecter les doublons"""
        print("üîç Scan du projet pour d√©tecter les doublons...")
        
        results = {
            'duplicate_files': [],
            'duplicate_functions': [],
            'duplicate_classes': [],
            'similar_files': [],
            'recommendations': []
        }
        
        # Scanner les fichiers
        for file_path in self._get_project_files():
            self._analyze_file(file_path)
        
        # D√©tecter les doublons
        results['duplicate_files'] = self._find_duplicate_files()
        results['duplicate_functions'] = self._find_duplicate_functions()
        results['duplicate_classes'] = self._find_duplicate_classes()
        results['similar_files'] = self._find_similar_files()
        results['recommendations'] = self._generate_recommendations(results)
        
        return results
    
    def _get_project_files(self) -> List[Path]:
        """R√©cup√®re tous les fichiers du projet √† analyser"""
        files = []
        
        for root, dirs, filenames in os.walk(self.project_root):
            # Ignorer les dossiers sp√©cifi√©s
            dirs[:] = [d for d in dirs if d not in self.ignore_patterns]
            
            for filename in filenames:
                file_path = Path(root) / filename
                
                # V√©rifier l'extension
                if file_path.suffix in self.code_extensions:
                    files.append(file_path)
        
        return files
    
    def _analyze_file(self, file_path: Path):
        """Analyse un fichier pour extraire ses caract√©ristiques"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Hash du contenu
            content_hash = hashlib.md5(content.encode()).hexdigest()
            self.file_hashes[str(file_path)] = {
                'hash': content_hash,
                'size': len(content),
                'lines': len(content.splitlines())
            }
            
            # Analyser le code Python
            if file_path.suffix == '.py':
                self._analyze_python_file(file_path, content)
            
            # Analyser le JavaScript
            elif file_path.suffix == '.js':
                self._analyze_javascript_file(file_path, content)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'analyse de {file_path}: {e}")
    
    def _analyze_python_file(self, file_path: Path, content: str):
        """Analyse sp√©cifique pour les fichiers Python"""
        try:
            tree = ast.parse(content)
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    signature = self._get_function_signature(node)
                    self.function_signatures[signature].append({
                        'file': str(file_path),
                        'name': node.name,
                        'line': node.lineno,
                        'args': [arg.arg for arg in node.args.args],
                        'body_hash': hashlib.md5(ast.dump(node).encode()).hexdigest()
                    })
                
                elif isinstance(node, ast.ClassDef):
                    signature = self._get_class_signature(node)
                    self.class_signatures[signature].append({
                        'file': str(file_path),
                        'name': node.name,
                        'line': node.lineno,
                        'methods': [n.name for n in node.body if isinstance(n, ast.FunctionDef)],
                        'body_hash': hashlib.md5(ast.dump(node).encode()).hexdigest()
                    })
                    
        except SyntaxError as e:
            print(f"‚ö†Ô∏è Erreur de syntaxe dans {file_path}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'analyse Python de {file_path}: {e}")
    
    def _analyze_javascript_file(self, file_path: Path, content: str):
        """Analyse basique pour les fichiers JavaScript"""
        # Analyse simple bas√©e sur les patterns
        import re
        
        # D√©tecter les fonctions
        function_pattern = r'function\s+(\w+)\s*\([^)]*\)'
        functions = re.findall(function_pattern, content)
        
        for func_name in functions:
            signature = f"js_function_{func_name}"
            self.function_signatures[signature].append({
                'file': str(file_path),
                'name': func_name,
                'language': 'javascript'
            })
    
    def _get_function_signature(self, node: ast.FunctionDef) -> str:
        """G√©n√®re une signature unique pour une fonction"""
        args = [arg.arg for arg in node.args.args]
        return f"{node.name}({','.join(args)})"
    
    def _get_class_signature(self, node: ast.ClassDef) -> str:
        """G√©n√®re une signature unique pour une classe"""
        methods = [n.name for n in node.body if isinstance(n, ast.FunctionDef)]
        return f"{node.name}[{','.join(sorted(methods))}]"
    
    def _find_duplicate_files(self) -> List[Dict]:
        """Trouve les fichiers dupliqu√©s (m√™me contenu)"""
        duplicates = []
        hash_groups = defaultdict(list)
        
        # Grouper par hash
        for file_path, info in self.file_hashes.items():
            hash_groups[info['hash']].append(file_path)
        
        # Identifier les doublons
        for file_hash, files in hash_groups.items():
            if len(files) > 1:
                duplicates.append({
                    'hash': file_hash,
                    'files': files,
                    'size': self.file_hashes[files[0]]['size']
                })
        
        return duplicates
    
    def _find_duplicate_functions(self) -> List[Dict]:
        """Trouve les fonctions dupliqu√©es"""
        duplicates = []
        
        for signature, functions in self.function_signatures.items():
            if len(functions) > 1:
                # V√©rifier si les corps sont identiques
                body_groups = defaultdict(list)
                for func in functions:
                    body_hash = func.get('body_hash', 'unknown')
                    body_groups[body_hash].append(func)
                
                for body_hash, func_group in body_groups.items():
                    if len(func_group) > 1:
                        duplicates.append({
                            'signature': signature,
                            'functions': func_group,
                            'body_hash': body_hash
                        })
        
        return duplicates
    
    def _find_duplicate_classes(self) -> List[Dict]:
        """Trouve les classes dupliqu√©es"""
        duplicates = []
        
        for signature, classes in self.class_signatures.items():
            if len(classes) > 1:
                # V√©rifier si les corps sont identiques
                body_groups = defaultdict(list)
                for cls in classes:
                    body_hash = cls.get('body_hash', 'unknown')
                    body_groups[body_hash].append(cls)
                
                for body_hash, class_group in body_groups.items():
                    if len(class_group) > 1:
                        duplicates.append({
                            'signature': signature,
                            'classes': class_group,
                            'body_hash': body_hash
                        })
        
        return duplicates
    
    def _find_similar_files(self, similarity_threshold: float = 0.8) -> List[Dict]:
        """Trouve les fichiers similaires (mais pas identiques)"""
        similar = []
        files = list(self.file_hashes.keys())
        
        for i, file1 in enumerate(files):
            for file2 in files[i+1:]:
                # √âviter les fichiers identiques
                if self.file_hashes[file1]['hash'] == self.file_hashes[file2]['hash']:
                    continue
                
                # Calculer la similarit√©
                similarity = self._calculate_file_similarity(file1, file2)
                
                if similarity >= similarity_threshold:
                    similar.append({
                        'file1': file1,
                        'file2': file2,
                        'similarity': similarity
                    })
        
        return similar
    
    def _calculate_file_similarity(self, file1: str, file2: str) -> float:
        """Calcule la similarit√© entre deux fichiers"""
        try:
            with open(file1, 'r', encoding='utf-8') as f:
                content1 = f.read().splitlines()
            
            with open(file2, 'r', encoding='utf-8') as f:
                content2 = f.read().splitlines()
            
            # Utiliser difflib pour calculer la similarit√©
            matcher = difflib.SequenceMatcher(None, content1, content2)
            return matcher.ratio()
            
        except Exception:
            return 0.0
    
    def _generate_recommendations(self, results: Dict) -> List[str]:
        """G√©n√®re des recommandations pour r√©soudre les doublons"""
        recommendations = []
        
        # Recommandations pour les fichiers dupliqu√©s
        if results['duplicate_files']:
            recommendations.append(
                f"üîÑ {len(results['duplicate_files'])} groupe(s) de fichiers dupliqu√©s d√©tect√©(s). "
                "Consid√©rez la suppression ou la consolidation."
            )
        
        # Recommandations pour les fonctions dupliqu√©es
        if results['duplicate_functions']:
            recommendations.append(
                f"üîß {len(results['duplicate_functions'])} fonction(s) dupliqu√©e(s) d√©tect√©e(s). "
                "Cr√©ez des modules utilitaires pour √©viter la duplication."
            )
        
        # Recommandations pour les classes dupliqu√©es
        if results['duplicate_classes']:
            recommendations.append(
                f"üèóÔ∏è {len(results['duplicate_classes'])} classe(s) dupliqu√©e(s) d√©tect√©e(s). "
                "Utilisez l'h√©ritage ou la composition pour r√©duire la duplication."
            )
        
        # Recommandations pour les fichiers similaires
        if results['similar_files']:
            recommendations.append(
                f"üìã {len(results['similar_files'])} fichier(s) similaire(s) d√©tect√©(s). "
                "V√©rifiez s'ils peuvent √™tre fusionn√©s ou refactoris√©s."
            )
        
        # Recommandations g√©n√©rales
        if not any(results.values()):
            recommendations.append("‚úÖ Aucun doublon d√©tect√© ! Votre code est bien organis√©.")
        else:
            recommendations.extend([
                "üí° Utilisez des modules partag√©s pour les fonctions communes",
                "üìÅ Organisez votre code en packages th√©matiques",
                "üîç Effectuez des revues de code r√©guli√®res",
                "üõ†Ô∏è Utilisez des outils de refactoring automatique"
            ])
        
        return recommendations
    
    def fix_duplicates(self, results: Dict, auto_fix: bool = False) -> Dict:
        """Propose ou applique des corrections pour les doublons"""
        fixes_applied = {
            'files_removed': [],
            'functions_consolidated': [],
            'classes_consolidated': [],
            'manual_review_needed': []
        }
        
        if auto_fix:
            # Auto-fix pour les fichiers identiques
            for duplicate_group in results['duplicate_files']:
                files = duplicate_group['files']
                if len(files) > 1:
                    # Garder le premier, supprimer les autres
                    for file_to_remove in files[1:]:
                        try:
                            os.remove(file_to_remove)
                            fixes_applied['files_removed'].append(file_to_remove)
                            print(f"üóëÔ∏è Fichier supprim√©: {file_to_remove}")
                        except Exception as e:
                            print(f"‚ùå Erreur lors de la suppression de {file_to_remove}: {e}")
        else:
            # Mode suggestion uniquement
            for duplicate_group in results['duplicate_files']:
                fixes_applied['manual_review_needed'].extend(duplicate_group['files'])
        
        return fixes_applied
    
    def generate_report(self, results: Dict) -> str:
        """G√©n√®re un rapport d√©taill√© des doublons"""
        report = []
        report.append("=" * 60)
        report.append("üîç RAPPORT DE D√âTECTION DES DOUBLONS - CFA")
        report.append("=" * 60)
        report.append("")
        
        # R√©sum√©
        report.append("üìä R√âSUM√â:")
        report.append(f"   ‚Ä¢ Fichiers dupliqu√©s: {len(results['duplicate_files'])}")
        report.append(f"   ‚Ä¢ Fonctions dupliqu√©es: {len(results['duplicate_functions'])}")
        report.append(f"   ‚Ä¢ Classes dupliqu√©es: {len(results['duplicate_classes'])}")
        report.append(f"   ‚Ä¢ Fichiers similaires: {len(results['similar_files'])}")
        report.append("")
        
        # D√©tails des fichiers dupliqu√©s
        if results['duplicate_files']:
            report.append("üìÅ FICHIERS DUPLIQU√âS:")
            for i, group in enumerate(results['duplicate_files'], 1):
                report.append(f"   Groupe {i} (Taille: {group['size']} octets):")
                for file_path in group['files']:
                    report.append(f"     - {file_path}")
                report.append("")
        
        # D√©tails des fonctions dupliqu√©es
        if results['duplicate_functions']:
            report.append("üîß FONCTIONS DUPLIQU√âES:")
            for i, group in enumerate(results['duplicate_functions'], 1):
                report.append(f"   Groupe {i} - Signature: {group['signature']}")
                for func in group['functions']:
                    report.append(f"     - {func['file']}:{func['line']} - {func['name']}")
                report.append("")
        
        # Recommandations
        if results['recommendations']:
            report.append("üí° RECOMMANDATIONS:")
            for rec in results['recommendations']:
                report.append(f"   ‚Ä¢ {rec}")
            report.append("")
        
        report.append("=" * 60)
        
        return "\n".join(report)
    
    def save_report(self, results: Dict, output_file: str = "duplicate_report.txt"):
        """Sauvegarde le rapport dans un fichier"""
        report = self.generate_report(results)
        
        output_path = self.project_root / output_file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÑ Rapport sauvegard√©: {output_path}")
        return output_path

def check_project_duplicates(project_root: str = "/home/ubuntu/caraibes-france-asie"):
    """Fonction utilitaire pour v√©rifier les doublons du projet"""
    checker = DuplicateChecker(project_root)
    results = checker.scan_project()
    
    # Afficher le rapport
    print(checker.generate_report(results))
    
    # Sauvegarder le rapport
    checker.save_report(results)
    
    return results

if __name__ == "__main__":
    # V√©rification automatique
    results = check_project_duplicates()
    
    # Proposer des corrections
    if any(results.values()):
        print("\nüîß Voulez-vous appliquer les corrections automatiques ? (y/N)")
        response = input().lower().strip()
        
        if response == 'y':
            checker = DuplicateChecker("/home/ubuntu/caraibes-france-asie")
            fixes = checker.fix_duplicates(results, auto_fix=True)
            print(f"‚úÖ Corrections appliqu√©es: {fixes}")
        else:
            print("‚ÑπÔ∏è Corrections non appliqu√©es. Consultez le rapport pour les actions manuelles.")
    else:
        print("‚úÖ Aucune correction n√©cessaire !")

